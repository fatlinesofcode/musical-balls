var balls = [];
var group = new Group();

var _gravityY = 1;
var _gravityX = 1;

var Ball = Base.extend({
    initialize: function(point, vector) {
        if (!vector || vector.isZero()) {
            this.vector = Point.random() * 5;
        } else {
            this.vector = vector * 2;
        }
        this.point = point;
        this.dampen = 0.4;
        this.bounce = -0.6;
        this.radius = 50 * Math.random() + 30;
        this.createPaths();
        group.addChild(this.item);
    },

    createPaths: function() {
        var overlayPos = this.point + this.radius / 8;
        /*
        var compound = new CompoundPath([
            new Path.Circle(this.point, this.radius),
            new Path.Circle(overlayPos, this.radius / 2)
        ]);
        */
        var color = new HsbColor(Math.random() * 360, 1, 1);
        /*
        var gradient = new Gradient([color, 'black'], 'radial');
        compound.children[0].fillColor = new GradientColor(gradient, this.point,
                this.point + this.radius, overlayPos);
        */
        var overlay = new Path.Circle(overlayPos, this.radius / 2);
      //  var overlayColor = color.clone();
      //  var fullOverlay = color.clone();
      //  overlayColor.alpha = 0.5;

      //  var overlayGradient = new Gradient([new RgbColor(1, 1, 1, 0.5), new RgbColor(1, 1, 1, 1)]);
        overlay.fillColor = color;//new GradientColor(overlayGradient, overlayPos, overlayPos + this.radius / 2);
        this.item = overlay;//new Group([overlay]);
    },

    iterate: function() {
        var size = view.size;
        this.vector.y = _gravityY;
        this.vector.x =_gravityX;//+= (_gravityX*0.1);
        var pre = this.point + this.vector;
        var hit = false;
        if (pre.x < this.radius || pre.x > size.width - this.radius){
            this.vector.x *= -this.dampen;
            hit = true;
        }
        if (pre.y < this.radius || pre.y > size.height - this.radius) {
           // if (Math.abs(this.vector.x) < 3)
           //     this.vector = Point.random() * [150, 100] + [-75, 20];
            this.vector.y *= this.bounce;
            hit = true;
        }

        if(hit && (Math.abs(this.vector.y) > 3)){
            console.log("hit", this)
            playSound(1);
        }

        var max = Point.max(this.radius, this.point + this.vector);
        this.item.position = this.point = Point.min(max, size - this.radius);
        this.item.rotate(this.vector.x / 2);
    }
});
/*
for (var i = 0; i < 10; i++) {
    var position = Point.random() * view.size,
            vector = (Point.random() - [0.5, 0]) * [50, 100],
            ball = new Ball(position, vector);
    balls.push(ball);
}*/

var textItem = new PointText(20, 30);
textItem.fillColor = 'white';
textItem.content = 'Click, drag and release to add balls.'

var lastDelta;
function onMouseDrag(event) {
    lastDelta = event.delta;
}
function addBall(point){
    console.log(point)
    var ball = new Ball(point, lastDelta);
    balls.push(ball);
    lastDelta = null;
    playSound(1);
}
function onMouseUp(event) {
    addBall(event.point)
}

function onFrame() {
    for (var i = 0, l = balls.length; i < l; i++)
        balls[i].iterate();
}

var preload;

function initSound() {
    if (window.top != window) {
        document.getElementById("header").style.display = "none";
    }

    if (!createjs.Sound.initializeDefaultPlugins()) {
        document.getElementById("error").style.display = "block";
        document.getElementById("content").style.display = "none";
        return;
    }

    // document.getElementById("loader").className = "loader";
    var assetsPath = "assets/mp3/";
    var manifest = [
        {src:assetsPath+"C_.mp3|"+assetsPath+"C_.ogg", id:1}
        //{src:assetsPath+"Game-Spawn.mp3|"+assetsPath+"Game-Spawn.ogg", id:2},

    ];

    createjs.Sound.addEventListener("loadComplete", createjs.proxy(soundLoaded, this)); // add an event listener for when load is completed
    createjs.Sound.registerManifest(manifest);
    console.log("sound");

}

function soundLoaded(event) {
    console.log("29","soundLoaded","soundLoaded", "");
    $("#bt-start").css({display:'block'})
    //  $("#ball-stage").css({display:'block'})
    $("#bt-start").bind('mouseup', start)
}
function start(e){
    console.log(InputEvent.pageX(e))
    $("#bt-start").css({display:'none'})
    $("#ball-stage").css({display:'block'})
    // playSound(1)
     addBall(new Point(parseInt(InputEvent.pageX(e)),parseInt(InputEvent.pageY(e))))
}

function stop() {
    if (preload != null) { preload.close(); }
    createjs.Sound.stop();
}


function playSound(id) {
    //Play the sound: play (src, interrupt, delay, offset, loop, volume, pan)
    var instance = createjs.Sound.play(id, createjs.Sound.INTERRUPT_NONE, 0, 0, false, 1);
    if (instance == null || instance.playState == createjs.Sound.PLAY_FAILED) { return; }
    instance.onComplete = function(instance) {
    }

}

function onDeviceMotion( event )
{
    $('#timestamp').html( new Date().toString() );
    $('#status').html( "Device Motion Event" );

    var eventDetails;
    try {
        var accel = event.accelerationIncludingGravity;
        eventDetails = "accelerationIncludingGravity: {" +
                "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x: " + accel.x +
                "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y: " + accel.y +
                "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z: " + accel.z +
                "<br/>} <br/><br/>" +
                "interval: " + event.interval;
     //   updateVelocity( event );
       // _gravityY *= accel.y;
        _gravityY = (accel.x*-1);
        _gravityX = (accel.y*-1);
    }
    catch (e)
    {
        eventDetails = e.toString();
    }

    $('#details').html( eventDetails );
}

window.addEventListener( "devicemotion", onDeviceMotion, false );



setTimeout(function () {
    initSound();
}, 100);